/** 
 * This file was automatically generated from the Tableau REST API Reference.
 * DO NOT MODIFY THIS FILE BY HAND. instead edit the metadata and/or code generator
 * and regenerate any files
 */

import { ClientLite } from "tabbycat/client";
import { DataSourceType } from "tabbycat/types";
import { WorkbookType } from "tabbycat/types";
import { FileUploadType } from "tabbycat/types";
import { FlowType } from "tabbycat/types";

/**
 * Uploads a block of data and appends it to the data that is already uploaded. This method
 * is called after an upload has been initiated using Initiate File Upload.
 * @param {string} uploadSessionId The ID of the upload session. You get this value when
 * 		you start an upload session using Initiate File Upload.
 * @param {Object} file File Contents
 * @returns {Promise<FileUploadType>} Promise | undefined
 */
export function appendToFileUpload(uploadSessionId: string, file: Object, client?: ClientLite) : Promise<FileUploadType>;

/**
 * Initiates the upload process for a file. After the upload has been initiated, you call
 * Append to File Upload to send individual blocks of the file to the server. When the
 * complete file has been sent to the server, you call Publish Data Source, Publish Flow, or
 * Publish Workbook to commit the upload.
 * @returns {Promise<FileUploadType>} Promise | undefined
 */
export function initiateFileUpload(client?: ClientLite) : Promise<FileUploadType>;

/**
 * Publishes a data source on the specified site, or appends data to an existing data
 * source. To make other changes to a published data source, call Update Data Source or
 * Update Data Source Connection.
 * @param {DataSourceType} datasource datasource
 * @param {Object} file File Contents
 * @param {Object} queryOptions an object containing the query options for this request
 * @param {boolean} queryOptions.overwrite (Optional) true to overwrite a data source
 * 		that has the same name, or false to fail if the specified data source already exists. The
 * 		default is false. If overwrite-flag is set to true but the data source doesn't already
 * 		exist, the operation succeeds. You can include both the overwrite and append parameters in
 * 		a request, but they cannot both be true.
 * @param {boolean} queryOptions.asJob (Optional) A Boolean value that is used to publish
 * 		data sources asynchronously. If you set this value to false (the default), the publishing
 * 		process runs as a synchronous process. If a data source is very large, the process might
 * 		time out before it finishes. If you set this value to true, the process runs
 * 		asynchronously, and a job will start to perform the publishing process and return the job
 * 		ID. You can check the status of the import job by calling Query Job.
 * @param {boolean} queryOptions.append (Optional) true to append the data being
 * 		published to an existing data source that has the same name. The default is false. If
 * 		append-flag is set to true but the data source doesn't already exist, the operation fails.
 * 		In order to append data to a published data source on Tableau Server, both the source file
 * 		and the published file must be an extract with the file extension .hyper or .tde. The
 * 		schema of the source and the published extract must match. If an extract was stored using
 * 		the multiple tables option, you can't append data to it.You can include both the overwrite
 * 		and append parameters in a request, but they cannot both be true.
 * @param {string} queryOptions.uploadSessionId If you are calling this method to commit
 * 		a file that was uploaded in parts, this value contains the upload session ID that was
 * 		generated by a call to Initiate File Upload. If this value is not included, the server
 * 		assumes that the body of the request contains the file to be published.
 * @param {string} queryOptions.datasourceType hyper, tds, tdsx, or tde the kind of file
 * 		that you are uploading. This value is required if you are calling Publish Data Source in
 * 		order to commit a file that was previously uploaded using Append to File Upload. The value
 * 		is not used if you upload a file in the body of the request.
 * @returns {Promise<DataSourceType>} Promise | undefined
 */
export function publishDataSource(datasource: DataSourceType, file: Object, queryOptions?: { overwrite: boolean, asJob: boolean, append: boolean, uploadSessionId: string, datasourceType: string }, client?: ClientLite) : Promise<DataSourceType>;

/**
 * Publishes a flow on the specified site. To make other changes to a published flow, call
 * Update Flow or Update Flow Connection.
 * @returns {Promise<FlowType>} Promise | undefined
 */
export function publishFlow(client?: ClientLite) : Promise<FlowType>;

/**
 * Publishes a workbook on the specified site. To make changes to a published workbook, call
 * Update Workbook or Update Workbook Connection.
 * @param {WorkbookType} workbook workbook
 * @param {Object} file File Contents
 * @param {Object} queryOptions an object containing the query options for this request
 * @param {boolean} queryOptions.overwrite (Optional) true to overwrite a workbook that
 * 		has the same name, or false to fail if the specified workbook already exists. The default
 * 		is false. If overwrite-flag is set to true but the workbook doesn't already exist, the
 * 		operation succeeds.
 * @param {boolean} queryOptions.asJob (Optional, boolean) If false, the workbook
 * 		publishing process runs as a synchronous process. If a workbook is very large, the process
 * 		might time out before it finishes. If you set this value to true, the process runs
 * 		asynchronously, and a job will start to perform the publishing process and return the job
 * 		ID. You can check the status of the import job by calling Query Job. Default value is
 * 		false.
 * @param {boolean} queryOptions.skipConnectionCheck (Optional, boolean) If true, then
 * 		the Tableau server will not check if a non-published connection of a workbook is
 * 		reachable. Publishing will succeed but unchecked connection issues may result in a
 * 		non-functioning workbook. If you encounter this issue, follow Keep Data Fresh
 * 		guidelines(Link opens in a new window). Default value is false.
 * @param {string} queryOptions.uploadSessionId If you are calling this method to commit
 * 		a file that was uploaded in parts, this value contains the upload session ID that was
 * 		generated by a call to Initiate File Upload. If this value is not included, the server
 * 		assumes that the body of the request contains the file to be published.
 * @param {string} queryOptions.workbookType twb or twbx to indicate whether you have
 * 		uploaded a workbook file (twb) or a packaged workbook file (twbx). This value is required
 * 		if you are calling Publish Workbook in order to commit a file that was previously uploaded
 * 		using Append to File Upload. The value is not used if you upload a file in the body of the
 * 		request.
 * @returns {Promise<WorkbookType>} Promise | undefined
 */
export function publishWorkbook(workbook: WorkbookType, file: Object, queryOptions?: { overwrite: boolean, asJob: boolean, skipConnectionCheck: boolean, uploadSessionId: string, workbookType: string }, client?: ClientLite) : Promise<WorkbookType>;
